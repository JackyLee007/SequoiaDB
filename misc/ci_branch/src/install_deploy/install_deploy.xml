<!-- ============================================================================
@description:  install and deploy sequoiadb
@parameter:    DEPLOY_MODE: G1D3|G3D3|STANDALONE, from jenkins configure page
               TEST_TYPE: from build.xml
               testhost_list: from build.xml
@author:       Ting YU 2016-10-19
============================================================================= -->

<project default="main" basedir="../../">  
   <property file="${basedir}/src/conf/test.conf" /> 
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar" />
      </classpath>
   </taskdef>
   <taskdef name="staf" classname="com.ibm.staf.ant.taskdef.STAF"/>     
   
   <target name="main">  
      <antcall target="uninstall"/>
      <antcallback target="ready_package" return="package_name"/><!--variable package_name used in target install--> 
      <antcall target="install"/>
      <antcall target="deploy"/>    
   </target>
   
   <target name="uninstall" depends="">    
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential>           
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${INSTALL_DIR}/uninstall --mode unattended WAIT 10m RETURNSTDOUT RETURNSTDERR"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="FS"
                  request="DELETE ENTRY ${INSTALL_DIR} RECURSE CONFIRM"
                  throwBuildException=""/>
            <if>
               <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
               <then>
                  <for list="${TPCC_DBPATH_LIST}" param="dbpath" parallel="false">
                     <sequential>
                        <staf location="@{testhost}" service="FS"
                              request="DELETE ENTRY @{dbpath} RECURSE CONFIRM"
                              throwBuildException=""/>
                     </sequential>
                  </for>
               </then>
            </if>
         </sequential>
      </for>
   </target>
   
   <target name="ready_package" depends="">
      <!--get run package name-->
      <property name="package_dir" location="${WORKSPACE}/archive/current" />
      <first id="package_fullname">
         <fileset dir="${package_dir}" includes="sequoiadb*.run" />
      </first>
      <property name="package_fullname" location="${toString:package_fullname}" />
      <basename property="package_name_part" file="${package_fullname}" suffix=".run"/>
      <property name="package_name" value="${package_name_part}.run" />     
      
      <!--copy run package to remote host-->
      <for list="${testhost_list}" param="testhost" parallel="false">
         <sequential>
            <staf location="@{testhost}" service="FS"
                  request="CREATE DIRECTORY ${CI_WORK_DIR}"
                  throwBuildException="1"/>
            <staf location="local" service="FS"
                  request="COPY FILE ${package_fullname} TODIRECTORY ${CI_WORK_DIR} TOMACHINE @{testhost}"
                  throwBuildException="1"/>
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND chmod +x ${CI_WORK_DIR}/${package_name} WAIT 1m"
                  throwBuildException="1"/>     
         </sequential>
      </for>
   </target>
   
   <target name="install" depends="">       
      <for list="${testhost_list}" param="testhost" parallel="true">
         <sequential> 
            <staf location="@{testhost}" service="FS"
                  request="QUERY ENTRY ${INSTALL_DIR}"
                  resultPrefix="check_dir"
                  throwBuildException=""/>
            <if>
               <equals arg1="${check_dir.rc}" arg2="48" />
               <else>
                  <fail message="exec: QUERY ENTRY ${INSTALL_DIR}, expect directory not exists. expect return code is 48, actual: ${check_dir.rc}"/>
               </else>
            </if>
            
            <staf location="@{testhost}" service="PROCESS"
                  request="START SHELL COMMAND ${CI_WORK_DIR}/${package_name} --mode unattended WAIT 10m STDERRTOSTDOUT RETURNSTDOUT"
                  resultPrefix="install"
                  throwBuildException="1"/>
            <propertyregex property="install_rc" input="${install.result}" regexp="Return\ Code:\ (.*)\n" select="\1"/>
            <if>
               <equals arg1="${install_rc}" arg2="0" />
               <else>
                  <fail message="exec: ${CI_WORK_DIR}/${package_name} --mode unattended, return code is not 0"/>
               </else>
            </if>
         </sequential>         
      </for>
   </target>
   
   <target name="deploy" depends="">
      <!--format host list-->
      <if>
         <contains string="${testhost_list}" substring=","/>
         <then>
            <propertyregex property="testhost_jsarr" input="${testhost_list}" regexp="," replace="','"/>
         </then>
         <else>
            <var name="testhost_jsarr" value="${testhost_list}"/>
         </else>
      </if>
      <var name="testhost_jsarr" value="['${testhost_jsarr}']"/>
      
      <!--create dbPath-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
         <then>
            <for list="${testhost_list}" param="testhost" parallel="true">
               <sequential>
                  <for list="${TPCC_DBPATH_LIST}" param="dbpath" parallel="false">
                     <sequential>
                        <staf location="@{testhost}" service="FS"
                              request="CREATE DIRECTORY @{dbpath}"
                              throwBuildException="1"/>
                        <staf location="@{testhost}" service="PROCESS"
                              request="START SHELL COMMAND chown sdbadmin:sdbadmin_group @{dbpath} WAIT 1m"
                              throwBuildException="1"/>     
                     </sequential>
                  </for>
               </sequential>
            </for>
         </then>
      </if>
      
      <!--copy sdb shell to localhost-->
      <delete dir="${CI_WORK_DIR}" failonerror="false"/>
      <mkdir dir="${CI_WORK_DIR}"/>
      <propertyregex property="firsthost" input="${testhost_list}" regexp=",(.*)" replace="" defaultValue="${testhost_list}"/>
      <staf location="${firsthost}" service="FS"
            request="COPY FILE ${INSTALL_DIR}/bin/sdb TODIRECTORY ${CI_WORK_DIR}"
            throwBuildException="1"/>
      <staf location="local" service="PROCESS"
            request="START SHELL COMMAND chmod a+x ${CI_WORK_DIR}/sdb WAIT 1m"
            throwBuildException="1"/> 

      <!--exec deploy.js-->
      <if>
         <equals arg1="${TEST_TYPE}" arg2="NORMALTEST" />
         <then>
            <var name="diagLevel" value="5"/>
         </then>
      </if>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="LARGEDATATEST" />
         <then>
            <var name="diagLevel" value="3"/>
         </then>
      </if>
      <if>
         <equals arg1="${TEST_TYPE}" arg2="PERFORMANCETEST_TPCC" />
         <then>
            <var name="diagLevel" value="3"/>
            <var name="DEPLOY_MODE" value="TPCC"/>
         </then>
      </if>
            
      <property name="sdb_shell" value="${CI_WORK_DIR}/sdb"/>
      <property name="deploy_cmd1" value="-f '${basedir}/src/conf/deploy_conf_${DEPLOY_MODE}.js,${basedir}/src/install_deploy/deploy.js'" />
      <property name="deploy_cmd2" value="-e &quot;var hostList=${testhost_jsarr};var diagLevel=${diagLevel};&quot;" />
      <echo message="exec cmd: ${sdb_shell} ${deploy_cmd1} ${deploy_cmd2}"/>
      <exec executable="${sdb_shell}" timeout="600000" outputproperty="deploy_out" failonerror="true">                                   
         <arg line="${deploy_cmd1} ${deploy_cmd2}" />
      </exec>
      <echo message="${deploy_out}"/>
   </target>

</project>
