<project default="main" basedir="../../">
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar" />
      </classpath>
   </taskdef>
   <taskdef name="staf" classname="com.ibm.staf.ant.taskdef.STAF" >
      <classpath>
         <pathelement location="${basedir}/lib/STAFAnt.jar" />
      </classpath>
   </taskdef>
   <property file="${basedir}/src/conf/test.conf" /> 
   
   <target name="main">    
      <property name="srccode_dir" location="${WORKSPACE}/sequoiadb" />
      <property name="release_dir" location="${WORKSPACE}/release" />    
      <property name="java_driver_jar" value="sequoiadb.jar" />             

      <antcallback target="check_parameter" return="cmd_debug, cmd_etp, SPARK_VERSION, BIN_PACKAGE"/>
      
      <delete dir="${release_dir}" failonerror="false"/>
      <mkdir dir="${release_dir}"/>
      
      <dbversion srccodedir="${srccode_dir}" version="sequoiadb_version"/>
      <getplatform resultProperty="platform" />
      
      <antcall target="compile_src"/>   
      <antcall target="compile_java_driver"/>
      <antcall target="compile_php_driver"/>
      <antcall target="compile_python_driver"/>
      <antcall target="compile_pg_connector"/>
      <antcall target="compile_hive_connector"/>
      <antcall target="compile_hadoop_connector"/>
      <!--TODO: antcall target="compile_spark_connector"/-->
      <antcall target="build_driver_package"/>
      <antcall target="copy_package_file"/>
      <antcall target="build_run_package"/>
      <antcall target="build_bin_package"/>
   </target>

   <target name="check_parameter">  
      <if>
         <isset property="IS_DEBUG"/>
         <else>           
            <var name="IS_DEBUG" value="true" />
         </else>
      </if>
      <if>
         <equals arg1="${IS_DEBUG}" arg2="true" />
         <then>          
            <property name="cmd_debug" value="--dd" />           
         </then>
         <else>
            <property name="cmd_debug" value="" />
         </else>
      </if>
      
      <if>
         <isset property="IS_ENTERPRISE"/>
         <else>
            <var name="IS_ENTERPRISE" value="true" />
         </else>
      </if>
      <if>
         <equals arg1="${IS_ENTERPRISE}" arg2="true" />
         <then>          
            <property name="cmd_etp" value="--enterprise" />           
         </then>
         <else>
            <property name="cmd_etp" value="" />
         </else>
      </if>
      
      <if>
         <isset property="SPARK_VERSION"/>
         <else>           
            <var name="SPARK_VERSION" value="1.6.1" />
         </else>
      </if>
  
      <if>
         <isset property="BIN_PACKAGE"/>
         <else>           
            <var name="BIN_PACKAGE" value="false" />
         </else>
      </if>

      <if>
         <isset property="UNPACK_DRIVER"/>
         <else>           
            <var name="UNPACK_DRIVER" value="false" />
         </else>
      </if>      
   </target>
       
   <target name="compile_src">
      <delete dir="${srccode_dir}/bin"  failonerror="false" />
      <delete dir="${srccode_dir}/build" failonerror="false" />
      
      <var name="cmd" value="${cmd_debug} ${cmd_etp} --all -j 4" />
      <echo message="exec cmd: scons ${cmd}" />
      <exec executable="scons" dir="${srccode_dir}" failonerror="true">
         <arg line="${cmd}" />
      </exec>
      
      <chmod perm="u+x" file="${srccode_dir}/bin/sequoiadb" />
      <exec executable="bin/sequoiadb" dir="${srccode_dir}" outputproperty="version_output" failonerror="true">
         <arg line="--version" />
      </exec>
      <echo file="${release_dir}/sequoiadb.version" message="${version_output}"/>
   </target>
   
   <target name="compile_pg_connector">
      <var name="src_dir" value="${srccode_dir}/driver/postgresql" />
      
      <!--compile--> 
      <exec executable="make" dir="${src_dir}" failonerror="true">
         <arg line="clean" />
      </exec>
      <exec executable="make" dir="${src_dir}" failonerror="true">
         <arg line="local" />
      </exec>
      <exec executable="make" dir="${src_dir}" failonerror="true">
         <arg line="all" />
      </exec>
      
      <!--get svn version--> 
      <var name="fdw_svn" unset="true" />
      <svnversion dir="${src_dir}" version="fdw_svn" />
      
      <!--get edition (judge changed or original) -->
      <exec executable="bash" dir="${src_dir}" outputproperty="fdw_edition">
         <arg value="-c" />
         <arg line="&quot;nm sdb_fdw.so | grep sdbuseownpostgres&quot;" />
      </exec>
      
      <!--change fdw name-->
      <if>
         <equals arg1="${fdw_edition}" arg2="" />
         <then>            
            <property name="fdw_name" value="sdb_fdw.so_${sequoiadb_version}_${fdw_svn}" />
            <move file="${src_dir}/sdb_fdw.so" tofile="${src_dir}/${fdw_name}"/>
            <echo message="fdw is original, fdw new name = ${fdw_name}" />  
         </then>
         <else>             
            <property name="fdw_name" value="sdb_fdw.so_e_${sequoiadb_version}_${fdw_svn}" />
            <move file="${src_dir}/sdb_fdw.so" tofile="${src_dir}/${fdw_name}"/>
            <echo message="fdw is enterprise, fdw new name = ${fdw_name}" />  
         </else>
      </if>
      
      <!--copy to build directory-->
      <delete dir="${src_dir}/build" failonerror="false"/>
      <mkdir dir="${src_dir}/build"/>
      <copy file="${src_dir}/${fdw_name}"       todir="${src_dir}/build" />
      <copy file="${src_dir}/sdb_fdw.control"   todir="${src_dir}/build" />
      <copy file="${src_dir}/sdb_fdw--1.0.sql"  todir="${src_dir}/build" />

   </target>
   
   <target name="compile_java_driver">
      <var name="src_dir" value="${srccode_dir}/driver/java" />
      <exec executable="scons" dir="${src_dir}" failonerror="true">
         <arg line="${cmd_debug}" />
      </exec>
   </target>
   
   <target name="compile_hive_connector">
      <var name="src_dir" value="${srccode_dir}/driver/hadoop/hive" />
      
      <property name="open.source.hive_connector.filename" value="hive-sequoiadb-apache.jar" />
      <property name="cdh.hive_connector.filename" value="hive-sequoiadb-cdh-5.0.0-beta-2.jar" />
            
      <ant antfile="${src_dir}//build.xml">
         <property name="java.driver.jar" value="${srccode_dir}/driver/java/${java_driver_jar}"/>
         <property name="javac.base.dir" value="${srccode_dir}"/>
         <property name="root.dir" value="${src_dir}"/>
         <property name="open.source.hive_connector.filename" value="${open.source.hive_connector.filename}" />
         <property name="cdh.hive_connector.filename" value="${cdh.hive_connector.filename}" />
      </ant>
      
      <!--copy to build directory-->
      <delete dir="${src_dir}/build" failonerror="false"/>
      <mkdir dir="${src_dir}/build"/>
      <copy file="${src_dir}/${cdh.hive_connector.filename}"         todir="${src_dir}/build" />
      <copy file="${src_dir}/${open.source.hive_connector.filename}" todir="${src_dir}/build" />
   </target>
   
   <target name="compile_hadoop_connector">
      <var name="src_dir" value="${srccode_dir}/driver/hadoop/hadoop-connector" />
      
      <ant antfile="${src_dir}/build.xml">
         <property name="hadoop.version" value="1.2" />
         <property name="basedir" value="${src_dir}" />
         <property name="java.driver.jar" value="${srccode_dir}/driver/java/${java_driver_jar}"/>
      </ant>
      <ant antfile="${src_dir}/build.xml">
         <property name="hadoop.version" value="2.2" />
         <property name="basedir" value="${src_dir}" />
         <property name="java.driver.jar" value="${srccode_dir}/driver/java/${java_driver_jar}"/>
      </ant>
      
      <!--copy to build directory-->
      <delete dir="${src_dir}/build" failonerror="false"/>
      <mkdir dir="${src_dir}/build"/>
      <copy todir="${src_dir}/build" >
         <fileset dir="${src_dir}" includes="**/hadoop-connector-*.jar" />
      </copy>
   </target>
   
   <target name="compile_spark_connector">
      <var name="src_dir" value="${srccode_dir}/driver/spark" />      
      <ant antfile="${src_dir}/build.xml">
        <property name="SPARK_VERSION" value="${SPARK_VERSION}" />
        <property name="spark_connector_root_dir" value="${WORKSPACE}/sequoiadb/driver/spark" />
      </ant>
   </target>
   
   <target name="compile_php_driver">
      <property name="php_version_list" value="5.3.3,5.3.8,5.3.10,5.3.15,5.4.6,5.5.0,5.6.0" />
      <var name="src_dir" value="${srccode_dir}/driver/php" />
      
      <delete dir="${src_dir}/release" failonerror="false"/>
      <mkdir dir="${src_dir}/release" />
      <delete dir="${src_dir}/build" failonerror="false"/>
      
      <if>
         <equals arg1="${cmd_debug}" arg2="--dd" />
         <then>
            <property name="build_dir" location="${src_dir}/build/dd" />
         </then>
         <else>
            <property name="build_dir" location="${src_dir}/build/normal" />
         </else>
      </if>
            
      <for list="${php_version_list}" param="phpversion">
         <sequential>
            <chmod perm="u+x" file="${srccode_dir}/thirdparty/php/linux/retriConfig.sh" />
            <exec executable="${srccode_dir}/thirdparty/php/linux/retriConfig.sh" failonerror="true">
               <arg line="@{phpversion} " />
            </exec>
            <echo>exec cmd: scons ${cmd_debug} --phpversion=@{phpversion}, in dir: ${src_dir}</echo>
            <exec executable="scons" dir="${src_dir}" failonerror="true">
               <arg line="${cmd_debug} --phpversion=@{phpversion}" />
            </exec>
            <copy file="${build_dir}/libsdbphp-@{phpversion}.so" todir="${src_dir}/release" />
         </sequential>
      </for>
   </target>

   <target name="compile_python_driver" >
      <var name="src_dir" value="${srccode_dir}/driver/python" /> 
      
      <exec executable="scons" dir="${src_dir}" failonerror="true">
         <arg line="${cmd_debug}" />
      </exec>
      <exec executable="scons" dir="${src_dir}" failonerror="true">
         <arg line="${cmd_debug} --py3" />
      </exec>
   </target>
   
   <target name="build_driver_package" >
      <property name="release_driver_dir" location="${release_dir}/driver" />
      <delete dir="${release_driver_dir}" failonerror="false"/>
      <mkdir dir="${release_driver_dir}"/>
      
      <mkdir dir="${release_driver_dir}/C#"/>
      <mkdir dir="${release_driver_dir}/C&amp;CPP"/>
      <mkdir dir="${release_driver_dir}/Hadoop"/>
      <mkdir dir="${release_driver_dir}/Java" /> 
      <mkdir dir="${release_driver_dir}/PHP"/>
      <mkdir dir="${release_driver_dir}/Postgresql" />
      <mkdir dir="${release_driver_dir}/Python" />
      
      <copy file="${srccode_dir}/driver/C#.Net/build/release/sequoiadb.dll" 
            tofile="${release_driver_dir}/C#/sequoiadb.dll" />
      
      <copy todir="${release_driver_dir}/C&amp;CPP">
         <fileset dir="${srccode_dir}/client" includes="include/**/*" />
      </copy>
      <copy todir="${release_driver_dir}/C&amp;CPP">
         <fileset dir="${srccode_dir}/client" includes="lib/*" />
      </copy>

      <copy todir="${release_driver_dir}/Hadoop" >
         <fileset dir="${srccode_dir}/driver/hadoop/hive/build" includes="**/*" />
      </copy>     
      <copy todir="${release_driver_dir}/Hadoop" >
         <fileset dir="${srccode_dir}/driver/hadoop/hadoop-connector/build" includes="**/*" />
      </copy>
      
      <copy todir="${release_driver_dir}/Java" 
            file="${srccode_dir}/driver/java/${java_driver_jar}" />
            
      <copy todir="${release_driver_dir}/PHP" >
         <fileset dir="${srccode_dir}/driver/php/release" includes="*.so" />
      </copy>
      
      <copy todir="${release_driver_dir}/Postgresql" >
         <fileset dir="${srccode_dir}/driver/postgresql/build" includes="**/*" />
      </copy>     
      <chmod dir="${release_driver_dir}/Postgresql" includes="*sdb_fdw.so*" perm="a+x" />
      
      <copy todir="${release_driver_dir}/Python" >
         <fileset dir="${srccode_dir}/driver/python/" includes="pysequoiadb*py*.tar.gz" />
      </copy>
      
      <tar destfile="${release_dir}/sequoiadb-driver-${sequoiadb_version}-${platform}.tar.gz" 
           longfile="gnu" compression="gzip" 
           basedir="${release_dir}" includes="driver/**/*"/>
                 
      <if>
         <equals arg1="${UNPACK_DRIVER}" arg2="true" />
         <then>
            <move file ="${release_driver_dir}/C#" tofile="${release_driver_dir}/C#-${sequoiadb_version}-${platform}"/>
            <move file ="${release_driver_dir}/C&amp;CPP" tofile="${release_driver_dir}/C&amp;CPP-${sequoiadb_version}-${platform}"/>
            <move file ="${release_driver_dir}/Hadoop" tofile="${release_driver_dir}/Hadoop-${sequoiadb_version}-${platform}"/>
            <move file ="${release_driver_dir}/Java" tofile="${release_driver_dir}/Java-${sequoiadb_version}-${platform}"/>
            <move file ="${release_driver_dir}/PHP" tofile="${release_driver_dir}/PHP-${sequoiadb_version}-${platform}"/>
            <move file ="${release_driver_dir}/Postgresql" tofile="${release_driver_dir}/Postgresql-${sequoiadb_version}-${platform}"/>
            <move file ="${release_driver_dir}/Python" tofile="${release_driver_dir}/Python-${sequoiadb_version}-${platform}"/>
            
            <tar destfile="${release_driver_dir}/C#-${sequoiadb_version}-${platform}.tar.gz" compression="gzip" longfile="gnu" 
                 basedir="${release_driver_dir}" includes="C#-${sequoiadb_version}-${platform}/**/*"/>
            <tar destfile="${release_driver_dir}/C&amp;CPP-${sequoiadb_version}-${platform}.tar.gz" compression="gzip" longfile="gnu" 
                 basedir="${release_driver_dir}" includes="C&amp;CPP-${sequoiadb_version}-${platform}/**/*"/>
            <tar destfile="${release_driver_dir}/Hadoop-${sequoiadb_version}-${platform}.tar.gz" compression="gzip" longfile="gnu" 
                 basedir="${release_driver_dir}" includes="Hadoop-${sequoiadb_version}-${platform}/**/*"/>
            <tar destfile="${release_driver_dir}/Java-${sequoiadb_version}-${platform}.tar.gz" compression="gzip" longfile="gnu" 
                 basedir="${release_driver_dir}" includes="Java-${sequoiadb_version}-${platform}/**/*"/>
            <tar destfile="${release_driver_dir}/PHP-${sequoiadb_version}-${platform}.tar.gz" compression="gzip" longfile="gnu" 
                 basedir="${release_driver_dir}" includes="PHP-${sequoiadb_version}-${platform}/**/*"/>
            <tar destfile="${release_driver_dir}/Postgresql-${sequoiadb_version}-${platform}.tar.gz" compression="gzip" longfile="gnu" 
                 basedir="${release_driver_dir}" includes="Postgresql-${sequoiadb_version}-${platform}/**/*"/>
            <tar destfile="${release_driver_dir}/Python-${sequoiadb_version}-${platform}.tar.gz" compression="gzip" longfile="gnu" 
                 basedir="${release_driver_dir}" includes="Python-${sequoiadb_version}-${platform}/**/*"/>     
         </then>
      </if>
      
      
      

   </target>
   
   <target name="copy_package_file" >
      <property name="release_db_dir" location="${release_dir}/sequoiadb" />
      <delete dir="${release_db_dir}" failonerror="false"/>
      <mkdir dir="${release_db_dir}"/>
      
      <mkdir dir="${release_db_dir}/CSharp" />
      <mkdir dir="${release_db_dir}/bin" />
      <mkdir dir="${release_db_dir}/conf/samples" />
      <mkdir dir="${release_db_dir}/conf/local" />
      <mkdir dir="${release_db_dir}/conf/log" />
      <mkdir dir="${release_db_dir}/conf/script" />
      <mkdir dir="${release_db_dir}/doc" />
      <mkdir dir="${release_db_dir}/hadoop" />
      <mkdir dir="${release_db_dir}/include" />
      <mkdir dir="${release_db_dir}/java/jdk" />
      <mkdir dir="${release_db_dir}/lib" />
      <mkdir dir="${release_db_dir}/license" />
      <mkdir dir="${release_db_dir}/packet" />
      <mkdir dir="${release_db_dir}/postgresql" />
      <mkdir dir="${release_db_dir}/python" />
      <mkdir dir="${release_db_dir}/samples" />
      <mkdir dir="${release_db_dir}/tools/server/php" />  
      <mkdir dir="${release_db_dir}/web" />
      <mkdir dir="${release_db_dir}/www" />
      
      <copy file="${srccode_dir}/driver/C#.Net/build/release/sequoiadb.dll" 
            tofile="${release_db_dir}/CSharp/sequoiadb.dll" />
              
      <copy todir="${release_db_dir}/bin" >
         <fileset dir="${srccode_dir}/bin" includes="**/*"/>
      </copy>
      <copy file="${srccode_dir}/script/sdbwsart" todir="${release_db_dir}/bin" />
      <replaceregexp file="${release_db_dir}/bin/sdbwsart" match="&#13;&#10;" replace="&#10;" flags="g" />
      <copy file="${srccode_dir}/script/sdbwstop" todir="${release_db_dir}/bin" />
      <replaceregexp file="${release_db_dir}/bin/sdbwstop" match="&#13;&#10;" replace="&#10;" flags="g" />

      
      <copy todir="${release_db_dir}/conf/script">
         <fileset dir="${srccode_dir}/conf/script" includes="**/*" />
      </copy>
      <copy todir="${release_db_dir}/conf/samples/">
         <fileset dir="${srccode_dir}/conf/samples/" />
      </copy>
      <copy file="${srccode_dir}/conf/sdbcm.conf" todir="${release_db_dir}/conf" />
      
      <copy todir="${release_db_dir}/doc">
         <fileset dir="${srccode_dir}/../archive/" includes="*.pdf,*.chm"/>
      </copy>
      <copy todir="${release_db_dir}/doc/manual">
         <fileset dir="${srccode_dir}/doc/manual" />
      </copy>
      
      <copy todir="${release_db_dir}/hadoop" >
         <fileset dir="${srccode_dir}/driver/hadoop/hadoop-connector/build" includes="**/*" />
      </copy>
      <copy todir="${release_db_dir}/hadoop" >
         <fileset dir="${srccode_dir}/driver/hadoop/hive/build" includes="**/*" />
      </copy>
      
      <copy todir="${release_db_dir}/include">
         <fileset dir="${srccode_dir}/client/include" includes="**/*" />
      </copy>
      
      <copy file="${srccode_dir}/driver/java/${java_driver_jar}" todir="${release_db_dir}/java" />
      <if>
         <equals arg1="${os.arch}" arg2="ppc64" />
         <then>
            <property name="php_version_arch" value="php_power" />
            <property name="jdk_arch" value="jdk_ppclinux64"/>
         </then>
      </if>
      <if>
         <equals arg1="Linux" arg2="${os.name}" />
         <then>
            <property name="jdk_arch" value="jdk_linux64"/>
            <property name="php_version_arch" value="php_linux" />
         </then>        
      </if>
      <copy todir="${release_db_dir}/java/jdk">
         <fileset dir="${srccode_dir}/java/${jdk_arch}/" />
      </copy>
      
      <copy todir="${release_db_dir}/lib">
         <fileset dir="${srccode_dir}/client/lib" includes="**/*" />
      </copy>
      <copy todir="${release_db_dir}/lib/phplib" >
         <fileset dir="${srccode_dir}/driver/php/release" includes="*.so" />
      </copy>
      
      <copy todir="${release_db_dir}/license">
         <fileset dir="${srccode_dir}/license" />
      </copy>
      
      <copy todir="${release_db_dir}/postgresql" >
         <fileset dir="${srccode_dir}/driver/postgresql/build" includes="**/*" />
      </copy>     
      <chmod dir="${release_db_dir}/postgresql" includes="*sdb_fdw.so*" perm="a+x" />
      
      <copy todir="${release_db_dir}/python" >
         <fileset dir="${srccode_dir}/driver/python/" includes="pysequoiadb*py*.tar.gz" />
      </copy>
      
      <copy todir="${release_db_dir}/samples">
         <fileset dir="${srccode_dir}/client/samples" />
      </copy>
      
      <copy todir="${release_db_dir}/tools/sdbsupport">
         <fileset dir="${srccode_dir}/tools/sdbsupport" includes="**/*" />
      </copy>
      <chmod file="${release_db_dir}/tools/sdbsupport/sdbsupport.sh" perm="u+x" />
      <copy todir="${release_db_dir}/tools/server/php">
         <fileset dir="${srccode_dir}/tools/server/${php_version_arch}/" />
      </copy>
      
      <copy todir="${release_db_dir}/web" >
         <fileset dir="${srccode_dir}/SequoiaDB/web" includes="**/*"/>
      </copy>
      
      <copy todir="${release_db_dir}/www">
         <fileset dir="${srccode_dir}/client/admin/admintpl" />
      </copy>
      
      <!--sigle file-->
      <copy file="${srccode_dir}/script/sequoiadb"                todir="${release_db_dir}/" />  
      <copy file="${srccode_dir}/script/install_om.sh"            todir="${release_db_dir}/" />
      <copy file="${srccode_dir}/misc/ci/mkrelease/compatible.sh" todir="${release_db_dir}" />
      <copy file="${srccode_dir}/misc/ci/mkrelease/version.conf"  todir="${release_db_dir}" />
      <replaceregexp file="${release_db_dir}/sequoiadb" match="&#13;&#10;" replace="&#10;" flags="g" />
          
      <!--exclude .svn-->
      <delete includeemptydirs="true">
         <fileset dir="${release_db_dir}" includes="**/.svn" />
      </delete>
   </target>   
      
   <target name="build_run_package" >
      <copy todir="${release_dir}">
         <fileset dir="${srccode_dir}/misc/ci/mkrelease" />
      </copy>      
   
      <if>
         <equals arg1="${IS_ENTERPRISE}" arg2="true" />
         <then>
            <property name="editon_str" value="-enterprise " />
         </then>
         <else>          
            <property name="editon_str" value="" />
         </else>
      </if>

      <var name="cmd" value="build sequoiadb_server.xml --setvars project.version=${sequoiadb_version} --setvars platform=${platform} --setvars enterpriseversion=${editon_str} --setvars project.outputDirectory=${release_dir}"/>
      <echo>exec cmd: builder ${cmd}</echo>
      <echo>exec in dir: ${release_dir}</echo>
      <exec executable="builder" dir="${release_dir}" failonerror="true">
         <arg line="${cmd}" />
      </exec>
           
   </target>   
   
   <target name="build_bin_package"> 
      <if>
        <equals arg1="${IS_ENTERPRISE}" arg2="true" />
        <then>
           <property name="enterprise_str" value="-enterprise" />
        </then>
        <else>          
           <property name="enterprise_str" value="" />
        </else>
      </if>
      <if>
         <equals arg1="${BIN_PACKAGE}" arg2="true" />
         <then>
         <tar destfile="${release_dir}/sequoiadb-${sequoiadb_version}-${platform}${enterprise_str}-bin.tar.gz" 
              compression="gzip" basedir="${release_dir}/sequoiadb/" includes="bin/**" />
         </then>
      </if>  
   </target>
   
   <macrodef name="dbversion">
      <attribute name="srccodedir"/>
      <attribute name="version"/>
      <sequential>
         <var name="tools_dir" value="@{srccodedir}/misc/ci/exec-tools"/>
         <exec executable="gcc" dir="${tools_dir}" failonerror="true">
            <arg line="${tools_dir}/print_version.c -o ${tools_dir}/print_version -I@{srccodedir}/SequoiaDB/engine/include" />
         </exec>
         <var name="@{version}" unset="true"/>
         <exec executable="${tools_dir}/print_version" outputproperty="@{version}" failonerror="true" />
      </sequential>
   </macrodef>
   
   <macrodef name="svnversion">
      <attribute name="dir"/>
      <attribute name="version"/>
      <sequential>
         <var name="@{verison}" unset="true"/>
         <exec executable="bash" dir="@{dir}" outputproperty="@{version}" failonerror="true" >
            <arg value="-c" />
            <arg line="&quot;svn info | grep Revision | awk '{print $2}'&quot;" />
         </exec>
      </sequential>
   </macrodef>
   
   <macrodef name="getplatform">
      <attribute name="resultProperty"/>
      <sequential>
         <exec executable="uname" outputproperty="uname" failonerror="true" >
            <arg line="-i" />
         </exec>
         <var name="@{resultProperty}" value="unknown" unset="true"/>
         <condition property="@{resultProperty}" value="linux_x86_64">
            <equals arg1="${uname}" arg2="x86_64" />
         </condition>
         <condition property="@{resultProperty}" value="ppc_linux_64">
            <equals arg1="${uname}" arg2="ppc64" />
         </condition>
      </sequential>
   </macrodef>
 
</project>